syntax = "proto3";

option java_package = "datashare.nfs";
option java_outer_classname = "BrokerProto";


service BrokerService {
  // ODC가 자신의 질병 코드 광고
  rpc SendAdvertisement(AdvertiseRequest) returns (Ack);

  // UDC가 질병코드 기반 구독
  rpc SendSubscription(SubscribeRequest) returns (Ack);

  // 매칭된 ODC에게 알림
  rpc NotifyMatch(Notification) returns (Ack);

  // ODC가 자신의 속성 헤더를 broker를 통해 UDC로 전달
  rpc SendAttributeValues(AttributeHeader) returns (Ack);

  // ODC가 필터링 결과를 DHT에 저장한 후, 키 리스트 전달
  rpc DeliverDHTKeys(DHTKeyList) returns (Ack);
}

service FilterExchange {
  rpc Connect (stream FilterMessage) returns (stream FilterResponse);
}

message AdvertiseRequest {
  string request_id = 1;
  string disease_code = 2; // 질병코드
  bytes metadata = 3;
}

message SubscribeRequest {
  string udc_id = 1;
  string disease_code = 2;
}

message Notification {
  string disease_code = 1;
  repeated string matched_odc_ids = 2;
}

message AttributeHeader {
  string odc_id = 1;
  map<string, string> attributes = 2;
}

message DHTKeyList {
  string udc_id = 1;
  string odc_id = 2;
  repeated string keys = 3;
  string description = 4;
}

message Ack {
  bool success = 1;
  string message = 2;
}

message FilterMessage {
  string sender_role = 1;
  string sender_id = 2;
  string receiver_id = 3;
  string disease_code = 4;

  string rule_text = 5;     // .drl 파일 내용을 문자열로 전송
  string mapping_info = 6;  // JSON 형태의 매핑 정보

  string filtered_result = 7;  // ODC일 때만 사용 가능
}

message FilterResponse {
  string result = 1;
  string matchedData = 2;
}